"""
Interfaz Web Streamlit para el Simulador de Comunicaciones 5G/6G

Ejecutar con: streamlit run app.py
"""

import streamlit as st
import numpy as np
import sys
import os

# Agregar src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.simulator import CommunicationSimulator
from src.visualization.plots import SimulatorVisualizer
from src.metrics.performance import MetricsCalculator


def main():
    st.set_page_config(
        page_title="Simulador 5G/6G",
        page_icon="üì°",
        layout="wide"
    )
    
    st.title("üì° Simulador de Sistemas de Comunicaci√≥n 5G/6G")
    st.markdown("""
    Simulador modular para an√°lisis de sistemas de comunicaci√≥n multi-generacionales
    con codificaci√≥n de fuente, codificaci√≥n de canal, modulaci√≥n digital y an√°lisis de rendimiento.
    """)
    
    # Sidebar para configuraci√≥n
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n del Sistema")
    
    # Tecnolog√≠a
    technology = st.sidebar.selectbox(
        "Tecnolog√≠a",
        ["5G", "5G_Advanced", "6G"],
        help="Selecciona la generaci√≥n tecnol√≥gica"
    )
    
    # Tipo de datos
    data_type = st.sidebar.selectbox(
        "Tipo de Datos",
        ["text", "audio", "image", "video"],
        help="Tipo de informaci√≥n a transmitir"
    )
    
    # C√≥digo de canal
    channel_code = st.sidebar.selectbox(
        "C√≥digo de Canal",
        ["LDPC", "Polar"],
        help="LDPC para datos, Polar para control"
    )
    
    # Modulaci√≥n (filtrada por tecnolog√≠a)
    if technology == "6G":
        modulation_options = ["QPSK", "16QAM", "64QAM", "256QAM", "1024QAM"]
    else:
        modulation_options = ["QPSK", "16QAM", "64QAM", "256QAM"]
    
    modulation = st.sidebar.selectbox(
        "Modulaci√≥n",
        modulation_options,
        index=1,  # Default 16QAM
        help="Esquema de modulaci√≥n digital"
    )
    
    # Modelo de canal
    channel_model = st.sidebar.selectbox(
        "Modelo de Canal",
        ["AWGN", "Rayleigh", "Rician"],
        help="AWGN: ideal, Rayleigh: NLOS, Rician: LOS"
    )
    
    # SNR
    snr_db = st.sidebar.slider(
        "SNR (dB)",
        min_value=0,
        max_value=30,
        value=10,
        step=1,
        help="Relaci√≥n se√±al a ruido del canal"
    )
    
    # Modo
    mode = st.sidebar.selectbox(
        "Modo de Operaci√≥n",
        ["SSCC"],  # JSCC pendiente
        help="SSCC: codificaci√≥n separada fuente-canal"
    )
    
    st.sidebar.markdown("---")
    
    # Par√°metros de simulaci√≥n
    st.sidebar.header("üìä Par√°metros de Simulaci√≥n")
    
    num_bits = st.sidebar.number_input(
        "N√∫mero de Bits",
        min_value=100,
        max_value=10000,
        value=1000,
        step=100,
        help="Cantidad de bits a transmitir"
    )
    
    # Bot√≥n de simulaci√≥n
    if st.sidebar.button("‚ñ∂Ô∏è Ejecutar Simulaci√≥n", type="primary"):
        run_simulation(
            technology, data_type, channel_code, modulation,
            channel_model, snr_db, mode, num_bits
        )
    
    # Informaci√≥n adicional
    st.sidebar.markdown("---")
    st.sidebar.info("""
    üí° **Sugerencias:**
    - SNR bajo (<10 dB): usar QPSK
    - SNR alto (>15 dB): usar 64/256-QAM
    - Texto corto: usar Polar
    - Datos grandes: usar LDPC
    """)
    
    # Tabs principales
    tab1, tab2, tab3 = st.tabs(["üìñ Informaci√≥n", "üìà Resultados", "‚ùì Ayuda"])
    
    with tab1:
        show_info_tab()
    
    with tab2:
        if 'results' not in st.session_state:
            st.info("üëà Configura los par√°metros en el panel lateral y presiona 'Ejecutar Simulaci√≥n'")
        else:
            show_results_tab()
    
    with tab3:
        show_help_tab()


def run_simulation(technology, data_type, channel_code, modulation,
                   channel_model, snr_db, mode, num_bits):
    """Ejecuta la simulaci√≥n con los par√°metros dados"""
    
    # Mostrar spinner mientras se ejecuta
    with st.spinner('Ejecutando simulaci√≥n...'):
        try:
            # Crear configuraci√≥n
            config = {
                'technology': technology,
                'data_type': data_type,
                'channel_code': channel_code,
                'modulation': modulation,
                'channel_model': channel_model,
                'snr_db': float(snr_db),
                'mode': mode
            }
            
            # Crear simulador
            sim = CommunicationSimulator(config)
            
            # Generar datos aleatorios
            data = np.random.randint(0, 2, num_bits)
            
            # Ejecutar simulaci√≥n
            results = sim.run_simulation(data)
            
            # Guardar en session state
            st.session_state['results'] = results
            st.session_state['config'] = config
            st.session_state['data'] = data
            
            st.success("‚úÖ Simulaci√≥n completada exitosamente!")
            st.balloons()
            
        except Exception as e:
            st.error(f"‚ùå Error en la simulaci√≥n: {str(e)}")
            import traceback
            st.code(traceback.format_exc())


def show_results_tab():
    """Muestra los resultados de la simulaci√≥n"""
    
    results = st.session_state['results']
    config = st.session_state['config']
    
    st.header("üìä Resultados de la Simulaci√≥n")
    
    # Configuraci√≥n usada
    with st.expander("üîß Configuraci√≥n Utilizada", expanded=False):
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Tecnolog√≠a", config['technology'])
            st.metric("Tipo de Datos", config['data_type'])
        with col2:
            st.metric("C√≥digo de Canal", config['channel_code'])
            st.metric("Modulaci√≥n", config['modulation'])
        with col3:
            st.metric("Canal", config['channel_model'])
            st.metric("SNR", f"{config['snr_db']} dB")
    
    # M√©tricas principales
    st.subheader("üìà M√©tricas de Rendimiento")
    
    metrics = results['metrics']
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ber = metrics.get('ber', 0)
        st.metric(
            "BER",
            f"{ber:.6f}",
            delta=None,
            help="Bit Error Rate: proporci√≥n de bits err√≥neos"
        )
    
    with col2:
        entropy = metrics.get('entropy', 0)
        st.metric(
            "Entrop√≠a",
            f"{entropy:.2f} bits",
            help="Contenido promedio de informaci√≥n"
        )
    
    with col3:
        mi = metrics.get('mutual_information', 0)
        st.metric(
            "Info. Mutua",
            f"{mi:.2f} bits",
            help="Informaci√≥n transferida con √©xito"
        )
    
    with col4:
        mse = metrics.get('mse', 0)
        st.metric(
            "MSE",
            f"{mse:.4f}",
            help="Error cuadr√°tico medio"
        )
    
    # M√©tricas adicionales seg√∫n tipo de datos
    if config['data_type'] in ['image', 'video']:
        col1, col2 = st.columns(2)
        with col1:
            psnr = metrics.get('psnr', 0)
            st.metric(
                "PSNR",
                f"{psnr:.2f} dB",
                help="Peak Signal-to-Noise Ratio"
            )
        with col2:
            ssim = metrics.get('ssim', 0)
            st.metric(
                "SSIM",
                f"{ssim:.4f}",
                help="Structural Similarity Index"
            )
    
    # Interpretaci√≥n de resultados
    st.subheader("üí° Interpretaci√≥n")
    
    ber_val = metrics.get('ber', 0)
    if ber_val < 1e-6:
        ber_status = "üü¢ Excelente"
        ber_msg = "Calidad de transmisi√≥n √≥ptima"
    elif ber_val < 1e-3:
        ber_status = "üü° Bueno"
        ber_msg = "Calidad adecuada para comunicaciones"
    elif ber_val < 0.1:
        ber_status = "üü† Aceptable"
        ber_msg = "Requiere correcci√≥n de errores adicional"
    else:
        ber_status = "üî¥ Malo"
        ber_msg = "Canal de mala calidad, considere reducir la tasa o aumentar SNR"
    
    st.info(f"**Estado del Canal:** {ber_status} - {ber_msg}")
    
    # Estados intermedios
    with st.expander("üîç Estados Intermedios del Pipeline"):
        intermediate = results['intermediate_states']
        
        for key, value in intermediate.items():
            if isinstance(value, np.ndarray) and len(value) > 0:
                st.write(f"**{key}:** Shape = {value.shape}, Dtype = {value.dtype}")


def show_info_tab():
    """Muestra informaci√≥n del simulador"""
    
    st.header("‚ÑπÔ∏è Acerca del Simulador")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Caracter√≠sticas")
        st.markdown("""
        - **Tecnolog√≠as:** 5G, 5G Advanced, 6G
        - **Tipos de Datos:** Texto, Audio, Imagen, Video
        - **C√≥digos de Canal:** LDPC, Polar
        - **Modulaci√≥n:** QPSK, 16/64/256/1024-QAM
        - **Canales:** AWGN, Rayleigh, Rician
        - **M√©tricas:** BER, PSNR, SSIM, Entrop√≠a, etc.
        """)
    
    with col2:
        st.subheader("üìö Pipeline de Simulaci√≥n")
        st.markdown("""
        1. üì• Generaci√≥n de Fuente
        2. üóúÔ∏è Codificaci√≥n de Fuente (compresi√≥n)
        3. üõ°Ô∏è Codificaci√≥n de Canal (FEC)
        4. üì° Modulaci√≥n Digital
        5. üåä Transmisi√≥n por Canal
        6. üìª Demodulaci√≥n
        7. üîì Decodificaci√≥n de Canal
        8. üì§ Decodificaci√≥n de Fuente
        """)
    
    st.subheader("üî¨ Fundamentos Te√≥ricos")
    
    st.markdown("""
    El simulador implementa los principios fundamentales de la teor√≠a de la informaci√≥n de Shannon:
    
    - **Codificaci√≥n de Fuente:** Elimina redundancia (compresi√≥n)
    - **Codificaci√≥n de Canal:** A√±ade redundancia controlada (protecci√≥n)
    - **Modulaci√≥n:** Mapea bits a s√≠mbolos complejos
    - **Canal:** Simula degradaciones reales (ruido, desvanecimiento)
    - **Decodificaci√≥n:** Recupera informaci√≥n con soft decisions (LLRs)
    """)


def show_help_tab():
    """Muestra ayuda y gu√≠a de uso"""
    
    st.header("‚ùì Ayuda y Gu√≠a de Uso")
    
    st.subheader("üöÄ Inicio R√°pido")
    st.markdown("""
    1. **Selecciona la tecnolog√≠a** (5G, 5G-A o 6G)
    2. **Elige el tipo de datos** a transmitir
    3. **Configura los par√°metros** de codificaci√≥n y modulaci√≥n
    4. **Ajusta el SNR** seg√∫n las condiciones del canal
    5. **Ejecuta la simulaci√≥n** y analiza los resultados
    """)
    
    st.subheader("üí° Recomendaciones")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Para SNR Bajo (<10 dB):**
        - Usar QPSK (m√°s robusto)
        - Preferir Polar para latencia baja
        - Tasa de c√≥digo baja (m√°s redundancia)
        """)
    
    with col2:
        st.markdown("""
        **Para SNR Alto (>15 dB):**
        - Usar 64-QAM o superior
        - LDPC para datos grandes
        - Tasa de c√≥digo alta (menos redundancia)
        """)
    
    st.subheader("üìä Interpretaci√≥n de M√©tricas")
    
    with st.expander("BER (Bit Error Rate)"):
        st.markdown("""
        - **< 10‚Åª‚Å∂:** Excelente (calidad broadcast)
        - **< 10‚Åª¬≥:** Bueno (comunicaciones de voz)
        - **< 10‚Åª¬≤:** Aceptable (requiere FEC adicional)
        - **> 10‚Åª¬π:** Inaceptable
        """)
    
    with st.expander("PSNR (Peak Signal-to-Noise Ratio)"):
        st.markdown("""
        - **> 40 dB:** Excelente calidad
        - **30-40 dB:** Buena calidad
        - **20-30 dB:** Calidad aceptable
        - **< 20 dB:** Mala calidad
        """)
    
    with st.expander("Entrop√≠a"):
        st.markdown("""
        Mide el contenido promedio de informaci√≥n:
        - **Alta:** Muchos datos, dif√≠cil de comprimir
        - **Baja:** Redundante, f√°cil de comprimir
        """)
    
    st.subheader("üìñ Documentaci√≥n")
    st.markdown("""
    Para m√°s informaci√≥n, consulta:
    - `manual-user.md` - Gu√≠a de usuario completa
    - `manual-dev.md` - Gu√≠a para desarrolladores
    - `README.md` - Especificaci√≥n t√©cnica
    """)


if __name__ == "__main__":
    main()
